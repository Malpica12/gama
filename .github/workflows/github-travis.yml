# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Github Travis

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ GAMA_1.8.2 ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:  # For manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Adopt OpenJDK 15
        uses: actions/setup-java@v2 
        with:
          distribution: 'adopt-openj9'
          java-version: '15'
          java-package: jdk  
          cache: maven

      - name: Prepare build
        run: |
          echo "MAVEN_OPTS='-Dorg.slf4j.simpleLogger.defaultLogLevel=error -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx2048m'" >> ~/.mavenrc
          sudo chmod +x $GITHUB_WORKSPACE/travis/*.sh
      
      - name: Build with Maven
        shell: bash
        run: $GITHUB_WORKSPACE/travis/compile.sh 
        env:
          MSG: ${ github.event.head_commit.message }
          
      - name: Validate and test Maven
        shell: bash
        run: $GITHUB_WORKSPACE/travis/validate_and_test.sh
        env:
          MSG: ${ github.event.head_commit.message }

      - name: Set Travis env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event.head_commit.message }}" == "ci" ]]; then
             echo "The action will continue and create a release"
             echo "CONTINUE=true" >> $GITHUB_ENV
          else
             echo "The action will nicely stop now"
             echo "CONTINUE=false" >> $GITHUB_ENV
          fi
          echo ${{ env.CONTINUE }}
          
      - name: Make zip file
        if: env.CONTINUE
        shell: bash
        run: $GITHUB_WORKSPACE/travis/zip_withjdk.sh
        env:
          MSG: ${ github.event.head_commit.message }

      - uses: actions/upload-artifact@v2
        if: env.CONTINUE
        env:
          working_directory: $GITHUB_WORKSPACE/ummisco.gama.product/target/products
        with:
          name: gama-zip-builds
          path: ./**zip
          
    outputs:
      continue_pipeline: ${{ env.CONTINUE }}

      
  apple-signing:
    needs: build
    if: needs.build.outputs.continue_pipeline
    runs-on: macos-11.0
    steps:
      - name: Get every builds
        run: mkdir ./artifacts

      - uses: actions/download-artifact@v2
        with:
          name: gama-zip-builds
          path: ./artifacts/

      - name: Import certificates
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_APP-CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_APP-CERTIFICATE_PWD }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
          security create-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_KEYCHAIN_PWD" build.keychain

      - name: Sign Application w/o JDK
        env: 
          working_directory: work
          # Variables
          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
          # Notarization variables
          NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
          NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}
        run: |
          # Unlock
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          unzip -q ../artifacts/Gama1.7-macosx.cocoa.x86_64.zip -d .
          # Sign everything inside app
          bash $GITHUB_WORKSPACE/travis/mac-sign.sh
          # Make DMG - Based on : https://developer.apple.com/forums/thread/128166
          hdiutil create -srcFolder ./Gama.app -o ../artifacts/Gama1.7-macosx.cocoa.x86_64.dmg
          codesign -s "$MACOS_DEV_ID" --timestamp -f -v ../artifacts/Gama1.7-macosx.cocoa.x86_64.dmg
          # Notarize dmg - Based on : https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087734
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "$NOTARY_APPLE_ID" --team-id "$NOTARY_TEAM_ID" --password "$NOTARY_PASSWORD"
          xcrun notarytool submit ../artifacts/Gama1.7-macosx.cocoa.x86_64.dmg --keychain-profile "AC_PASSWORD" --wait
          xcrun stapler staple "../artifacts/Gama1.7-macosx.cocoa.x86_64.dmg"

      - name: Sign Application w/ JDK
        env: 
          working_directory: work
          # Variables
          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
          # Notarization variables
          NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
          NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}
        run: |
          # Unlock
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          unzip -q ../artifacts/Gama1.7-macosx.cocoa.x86_64_withJDK.zip -d .
          # Sign everything inside app
          bash $GITHUB_WORKSPACE/travis/mac-sign.sh
          # Make DMG - Based on : https://developer.apple.com/forums/thread/128166
          hdiutil create -srcFolder ./Gama.app -o ../artifacts/Gama1.7-macosx.cocoa.x86_64_withJDK.dmg
          codesign -s "$MACOS_DEV_ID" --timestamp -f -v ../artifacts/Gama1.7-macosx.cocoa.x86_64_withJDK.dmg
          # Notarize dmg - Based on : https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087734
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "$NOTARY_APPLE_ID" --team-id "$NOTARY_TEAM_ID" --password "$NOTARY_PASSWORD"
          xcrun notarytool submit ../artifacts/Gama1.7-macosx.cocoa.x86_64_withJDK.dmg --keychain-profile "AC_PASSWORD" --wait
          xcrun stapler staple "../artifacts/Gama1.7-macosx.cocoa.x86_64_withJDK.dmg"

      - uses: actions/upload-artifact@v2
        env:
          working_directory: ./artifacts
        with:
          name: gama-zip-builds
          path: ./Gama*


  publish-archives:
    needs: apple-signing
    runs-on: ubuntu-latest
    steps:

      - name: Set Travis env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
             echo "[WARNING] Forcing travis version release"
             echo "TRAVIS_MSG=ci release" >> $GITHUB_ENV
          else
             echo "TRAVIS_MSG=$(echo $github.event.head_commit.message )" >> $GITHUB_ENV
          fi
          echo $TRAVIS_MSG

      - name: Publish to Github
        shell: bash
        run: $GITHUB_WORKSPACE/travis/publish.sh
        env:  
          SSH_USER_PWD: ${{ secrets.USER_PWD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          MSG: ${{ env.TRAVIS_MSG }}
          GITHUB_TOKEN: ${{ github.token }}
          SSHPASS: ${{ secrets.USER_PWD }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TRAVIS_COMMIT: ${ GITHUB_SHA }
          TRAVIS_EVENT_TYPE: ${{ github.event_name }}
