# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Github Travis

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ GAMA_1.8.2 ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:  # For manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Adopt OpenJDK 15
        uses: actions/setup-java@v2 
        with:
          distribution: 'adopt-openj9'
          java-version: '15'
          java-package: jdk  
          cache: maven

      - name: Prepare build
        run: |
          echo "MAVEN_OPTS='-Dorg.slf4j.simpleLogger.defaultLogLevel=error -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx2048m'" >> ~/.mavenrc
          sudo chmod +x $GITHUB_WORKSPACE/travis/*.sh
      
      - name: Build with Maven
        shell: bash
        run: $GITHUB_WORKSPACE/travis/compile.sh 
        env:
          MSG: ${ github.event.head_commit.message }
          
      - name: Validate and test Maven
        shell: bash
        run: $GITHUB_WORKSPACE/travis/validate_and_test.sh
        env:
          MSG: ${ github.event.head_commit.message }

      - name: Set Travis env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
             echo "[WARNING] Forcing travis version release"
             echo "TRAVIS_MSG=ci release" >> $GITHUB_ENV
          else
             echo "TRAVIS_MSG=$(echo $github.event.head_commit.message )" >> $GITHUB_ENV
          fi
          echo $TRAVIS_MSG
      
      #  apple-signing:
      #    needs: build
      #    runs-on: macos-11.0
      #    steps:
      #      - uses: actions/checkout@v2
      #
      #     # Install dependencies and build you app here #
      #     # - name: Build executable
      #     #     run: ---
      #
      #      - name: Import certificates
      #        env: 
      #          MACOS_CERTIFICATE: ${{ secrets.MACOS_APP-CERTIFICATE }}
      #          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_APP-CERTIFICATE_PWD }}
      #          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
      #        run: |
      #          echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
      #          security create-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain security default-keychain -s build.keychain
      #          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
      #          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
      #          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_KEYCHAIN_PWD" build.keychain
      #
      #      - name: Sign Application w/o JDK
      #        env: 
      #          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
      #          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
      #        run: |
      #          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
      #          # unzip archive
      #          # cd /path/to/../Gama.app
      #          bash $GITHUB_WORKSPACE/travis/mac-sign.sh
      #
      #      - name: Create DMG file
      #        env: 
      #          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
      #        run: |
      #          # Based on : https://developer.apple.com/forums/thread/128166
      #          hdiutil create -srcFolder ./Gama.app -o gama-wo-JDK.dmg
      #          codesign -s "$MACOS_DEV_ID" --timestamp -f -v gama-wo-JDK.dmg
      #
      #      - name: Create notarize DMG file
      #        env:
      #          NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
      #          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
      #          NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}
      #        run: |
      #          # Based on : https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087734
      #          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "$NOTARY_APPLE_ID" --team-id "$NOTARY_TEAM_ID" --password "$NOTARY_PASSWORD"
      #          xcrun notarytool submit gama-wo-JDK.dmg --keychain-profile "AC_PASSWORD" --wait
      #          xcrun stapler staple "gama.dmg"
      #
      #
      #  publish-archives:
      #    needs: apple-signing
      #    runs-on: macos-11.0
      #    steps:
      - name: Publish to Github
        shell: bash
        run: $GITHUB_WORKSPACE/travis/publish.sh
        env:  
          SSH_USER_PWD: ${{ secrets.USER_PWD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          MSG: ${{ env.TRAVIS_MSG }}
          GITHUB_TOKEN: ${{ github.token }}
          SSHPASS: ${{ secrets.USER_PWD }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TRAVIS_COMMIT: ${ GITHUB_SHA }
          TRAVIS_EVENT_TYPE: ${{ github.event_name }}