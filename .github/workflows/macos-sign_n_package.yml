# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# Freely based and inspired by this blog post : https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions

name: Sign'n'Package macOS
on:
  push:

jobs:
  macos:
    runs-on: macos-11.0
    steps:
      - uses: actions/checkout@v2

     # Install dependencies and build you app here #
     # - name: Build executable
     #     run: ---

      - name: Import certificates
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_APP-CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_APP-CERTIFICATE_PWD }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
          security create-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_KEYCHAIN_PWD" build.keychain

      - name: Sign Application w/o JDK
        env: 
          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
        run: |
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          # unzip archive
          # cd /path/to/../Gama.app
          bash $GITHUB_WORKSPACE/travis/mac-sign.sh

      - name: Create DMG file
        env: 
          MACOS_DEV_ID: ${{ secrets.MACOS_DEV_ID }}
        run: |
          # Based on : https://developer.apple.com/forums/thread/128166
          hdiutil create -srcFolder ./Gama.app -o gama-wo-JDK.dmg
          codesign -s "$MACOS_DEV_ID" --timestamp -f -v gama-wo-JDK.dmg

      - name: Create notarize DMG file
        env:
          NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
          NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}
        run: |
          # Based on : https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087734
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "$NOTARY_APPLE_ID" --team-id "$NOTARY_TEAM_ID" --password "$NOTARY_PASSWORD"
          xcrun notarytool submit gama-wo-JDK.dmg --keychain-profile "AC_PASSWORD" --wait
          xcrun stapler staple "gama.dmg"