<?xml version="1.0" encoding="UTF-8"?><!---->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wiki="www.google.fr">

<xsl:template match="/">
 	<xsl:text>#summary Built-in Skills (Developer Guide)
#sidebar G__TOC
=Built-in Skills=
----
&lt;font color="red"&gt; This file is automatically generated from java files. Do Not Edit It. &lt;/font&gt;
&lt;br/&gt;
----

Skills are built-in modules, written in Java, that provide a set of related built-in variables and built-in actions (in addition to those already provided by GAMA) to the species that declare them. A declaration of skill is done by filling the skills attribute in the species definition:

{{{
species my_species skills: [skill1, skill2] {
    ...
}
}}}

Skills have been designed to be mutually compatible so that any combination of them will result in a functional species. The list of available skills in GAMA is:

  * moving: for agents that need to move.
  
So, for instance, if a species is declared as:

{{{
species foo skills: [moving]{
...
}
}}}

its agents will automatically be provided with the following variables : "speed, heading, destination (r/o)" and the following actions: "move, goto, wander, follow" in addition to those built-in in species and declared by the modeller. Most of these variables, except the ones marked read-only, can be customized and modified like normal variables by the modeller. For instance, one could want to set a maximum for the speed; this would be done by redeclaring it like this:

{{{
float speed max:100 min:0;
}}}

Or, to obtain a speed increasing at each simulation step:

{{{
float speed max:100 min:0  &lt;- 1 update: speed * 1.01;
}}}

Or, to change the speed in a behavior:

{{{
if speed = 5 {
    speed &lt;- 10;
}
}}}

[#Table_of_Contents Top of the page] 

&lt;br/&gt;
----
==Table of Contents==
&lt;wiki:toc max_depth="3" /&gt;
	</xsl:text>

	<xsl:for-each select="doc/skills/skill">
    	<xsl:sort select="@name" />
&lt;br/&gt;
----
==<xsl:value-of select="@name"/>== 	
<xsl:value-of select="documentation/result"/> 
		<xsl:call-template name="buildVariables"/>
		<xsl:call-template name="buildActions"/>		
	</xsl:for-each>

</xsl:template>

    
 	<xsl:template name="buildVariables"> 
=== Variables ===
	<xsl:for-each select="vars/var">		
	<xsl:sort select="@name" />   
  * *<xsl:value-of select="@name"/>* (<xsl:value-of select="@type"/>): <xsl:value-of select="documentation/result"/> 
		</xsl:for-each>
	</xsl:template>

 	<xsl:template name="buildActions"> 
 	
=== Actions === 
	<xsl:for-each select="actions/action">		
	<xsl:sort select="@name" />  
	 
==== *<xsl:value-of select="@name"/>* ==== 
<xsl:value-of select="documentation/result"/>
  * returns: <xsl:value-of select="@returnType"/>
  			<xsl:for-each select="args/arg"> 			
  * *<xsl:value-of select="@name"/>* (<xsl:value-of select="@type"/>): <xsl:value-of select="documentation/result"/> 
  			</xsl:for-each>
		
<xsl:if test="documentation/examples[node()]">

{{{
<xsl:for-each select="documentation/examples/example" >
<xsl:if test="@code != ''"><xsl:value-of select="@code"/><xsl:text>
</xsl:text>
</xsl:if>
</xsl:for-each>}}} 
</xsl:if>	
		
		</xsl:for-each>	

[#Table_of_Contents Top of the page] 
	</xsl:template>
  
</xsl:stylesheet>
